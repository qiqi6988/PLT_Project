type token =
  | TL
  | TS
  | TTL
  | TTS
  | TE
  | T
  | QE
  | EOF
  | FOR
  | LPAREN
  | RPAREN
  | COMMA
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | SEMI
  | INT_KEY
  | FLOAT_KEY
  | ARRAY_KEY
  | STRING_KEY
  | VOID_KEY
  | BOOLEAN_KEY
  | POINT_KEY
  | LINE_KEY
  | POLYGON_KEY
  | ELLIPSE_KEY
  | WHILE
  | IF
  | ELSE
  | ELSEIF
  | CASE
  | RETURN
  | SWITCH
  | BREAK
  | CONTINUE
  | DEF
  | DEFAULT
  | ID of (string)
  | NUM of (float)
  | INT of (int)
  | String of (string)
  | PARA
  | INTERS
  | RELAT
  | EE
  | NE
  | SE
  | LE
  | S
  | L
  | E
  | PLUS
  | MINUS
  | MUL
  | DIV
  | PERC
  | SSE
  | LLE
  | SS
  | LL

open Parsing;;
# 2 "ALG_Parser.mly"
  open Printf
	open AST
# 69 "ALG_Parser.ml"
let yytransl_const = [|
  257 (* TL *);
  258 (* TS *);
  259 (* TTL *);
  260 (* TTS *);
  261 (* TE *);
  262 (* T *);
  263 (* QE *);
    0 (* EOF *);
  264 (* FOR *);
  265 (* LPAREN *);
  266 (* RPAREN *);
  267 (* COMMA *);
  268 (* LBRACKET *);
  269 (* RBRACKET *);
  270 (* LBRACE *);
  271 (* RBRACE *);
  272 (* SEMI *);
  273 (* INT_KEY *);
  274 (* FLOAT_KEY *);
  275 (* ARRAY_KEY *);
  276 (* STRING_KEY *);
  277 (* VOID_KEY *);
  278 (* BOOLEAN_KEY *);
  279 (* POINT_KEY *);
  280 (* LINE_KEY *);
  281 (* POLYGON_KEY *);
  282 (* ELLIPSE_KEY *);
  283 (* WHILE *);
  284 (* IF *);
  285 (* ELSE *);
  286 (* ELSEIF *);
  287 (* CASE *);
  288 (* RETURN *);
  289 (* SWITCH *);
  290 (* BREAK *);
  291 (* CONTINUE *);
  292 (* DEF *);
  293 (* DEFAULT *);
  298 (* PARA *);
  299 (* INTERS *);
  300 (* RELAT *);
  301 (* EE *);
  302 (* NE *);
  303 (* SE *);
  304 (* LE *);
  305 (* S *);
  306 (* L *);
  307 (* E *);
  308 (* PLUS *);
  309 (* MINUS *);
  310 (* MUL *);
  311 (* DIV *);
  312 (* PERC *);
  313 (* SSE *);
  314 (* LLE *);
  315 (* SS *);
  316 (* LL *);
    0|]

let yytransl_block = [|
  294 (* ID *);
  295 (* NUM *);
  296 (* INT *);
  297 (* String *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\001\000\004\000\004\000\005\000\005\000\005\000\
\005\000\005\000\005\000\005\000\007\000\007\000\007\000\007\000\
\007\000\007\000\007\000\007\000\007\000\007\000\008\000\002\000\
\009\000\009\000\010\000\010\000\011\000\011\000\003\000\012\000\
\012\000\013\000\013\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\015\000\014\000\
\016\000\018\000\018\000\017\000\000\000"

let yylen = "\002\000\
\000\000\002\000\002\000\000\000\002\000\002\000\003\000\003\000\
\005\000\007\000\009\000\005\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\002\000\003\000\
\000\000\001\000\001\000\003\000\000\000\002\000\010\000\000\000\
\001\000\001\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\004\000\007\000\003\000\
\005\000\005\000\003\000\005\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\013\000\014\000\015\000\016\000\017\000\018\000\
\019\000\020\000\021\000\022\000\000\000\077\000\000\000\000\000\
\000\000\000\000\002\000\003\000\000\000\000\000\024\000\000\000\
\000\000\000\000\000\000\026\000\023\000\000\000\000\000\028\000\
\000\000\000\000\000\000\030\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\036\000\037\000\039\000\000\000\
\000\000\000\000\040\000\041\000\042\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\031\000\005\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\069\000\000\000\000\000\
\072\000\008\000\000\000\000\000\007\000\000\000\000\000\033\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\000\057\000\059\000\058\000\061\000\
\060\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\
\000\000\000\000\000\000\070\000\000\000\000\000\000\000\000\000\
\073\000\012\000\000\000\035\000\000\000\076\000\000\000\000\000\
\000\000\000\000\071\000\010\000\000\000\011\000"

let yydgoto = "\002\000\
\014\000\015\000\016\000\048\000\049\000\050\000\017\000\026\000\
\027\000\028\000\035\000\103\000\104\000\051\000\052\000\053\000\
\057\000\058\000"

let yysindex = "\005\000\
\145\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\045\000\000\000\145\255\145\255\
\228\254\230\254\000\000\000\000\003\255\015\255\000\000\045\000\
\025\255\055\255\026\255\000\000\000\000\045\000\064\255\000\000\
\045\000\045\000\056\004\000\000\059\255\050\255\057\255\056\004\
\073\255\075\255\050\255\006\255\000\000\000\000\000\000\072\255\
\056\004\130\255\000\000\000\000\000\000\050\255\149\255\050\255\
\068\255\079\255\083\255\050\255\050\255\209\255\050\255\050\255\
\000\000\000\000\050\255\050\255\050\255\050\255\050\255\050\255\
\050\255\000\000\050\255\050\255\050\255\050\255\050\255\050\255\
\050\255\050\255\050\255\050\255\050\255\050\255\050\255\050\255\
\050\255\050\255\050\255\050\255\228\255\000\000\032\000\208\255\
\000\000\000\000\051\000\111\000\000\000\130\000\090\255\000\000\
\111\001\191\255\191\255\191\255\191\255\191\255\191\255\191\255\
\191\255\191\255\191\255\000\000\000\000\000\000\000\000\000\000\
\000\000\171\001\171\001\221\003\221\003\221\003\191\255\191\255\
\191\255\191\255\050\255\050\255\208\255\190\000\254\254\000\000\
\056\004\056\004\050\255\000\000\209\000\013\001\050\255\057\255\
\000\000\000\000\056\255\000\000\050\255\000\000\032\001\092\255\
\056\004\092\001\000\000\000\000\056\004\000\000"

let yyrindex = "\000\000\
\104\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\104\000\104\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\111\255\
\000\000\133\255\000\000\000\000\000\000\000\000\000\000\000\000\
\018\004\018\004\129\255\000\000\000\000\000\000\000\000\129\255\
\000\000\000\000\000\000\070\255\000\000\000\000\000\000\000\000\
\129\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\135\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\137\255\000\000\000\000\
\211\255\180\001\240\001\003\002\063\002\082\002\142\002\161\002\
\221\002\240\002\044\003\000\000\000\000\000\000\000\000\000\000\
\000\000\196\001\019\002\054\255\086\255\177\003\063\003\123\003\
\142\003\202\003\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\039\004\000\000\000\000\000\000\000\000\136\255\
\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\012\000\027\000\000\000\220\255\120\255\218\255\246\255\000\000\
\000\000\118\000\123\000\000\000\019\000\000\000\000\000\000\000\
\167\255\168\255"

let yytablesize = 1377
let yytable = "\055\000\
\146\000\147\000\018\000\059\000\062\000\001\000\135\000\136\000\
\144\000\021\000\145\000\022\000\066\000\025\000\063\000\093\000\
\156\000\095\000\023\000\025\000\158\000\099\000\100\000\024\000\
\102\000\105\000\019\000\020\000\106\000\107\000\108\000\109\000\
\110\000\111\000\112\000\031\000\113\000\114\000\115\000\116\000\
\117\000\118\000\119\000\120\000\121\000\122\000\123\000\124\000\
\125\000\126\000\127\000\128\000\129\000\130\000\152\000\136\000\
\064\000\134\000\038\000\034\000\034\000\039\000\029\000\053\000\
\053\000\030\000\053\000\054\000\056\000\053\000\038\000\038\000\
\038\000\038\000\038\000\038\000\038\000\033\000\096\000\038\000\
\038\000\060\000\038\000\061\000\153\000\038\000\065\000\044\000\
\045\000\046\000\047\000\097\000\141\000\142\000\095\000\054\000\
\054\000\098\000\054\000\140\000\102\000\054\000\144\000\001\000\
\151\000\053\000\053\000\053\000\053\000\053\000\154\000\038\000\
\038\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\025\000\038\000\038\000\038\000\038\000\038\000\038\000\038\000\
\038\000\038\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\054\000\054\000\054\000\054\000\054\000\027\000\004\000\
\032\000\074\000\034\000\032\000\074\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\036\000\148\000\094\000\000\000\
\000\000\003\000\004\000\005\000\006\000\007\000\008\000\009\000\
\010\000\011\000\012\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\013\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\000\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\038\000\000\000\000\000\133\000\068\000\068\000\000\000\068\000\
\101\000\000\000\068\000\000\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\078\000\079\000\080\000\081\000\082\000\
\083\000\000\000\000\000\131\000\000\000\044\000\045\000\046\000\
\047\000\000\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\000\000\084\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\000\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\000\000\
\000\000\000\000\132\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\000\000\000\000\137\000\003\000\004\000\005\000\
\006\000\007\000\008\000\009\000\010\000\011\000\012\000\000\000\
\000\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\000\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\000\000\084\000\085\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\000\000\000\000\
\138\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\067\000\068\000\069\000\070\000\071\000\072\000\
\073\000\000\000\000\000\000\000\139\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\000\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\075\000\076\000\077\000\078\000\079\000\
\080\000\081\000\082\000\083\000\000\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\067\000\068\000\
\069\000\070\000\071\000\072\000\073\000\000\000\000\000\000\000\
\143\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\067\000\068\000\069\000\070\000\071\000\072\000\073\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\149\000\000\000\000\000\000\000\000\000\000\000\000\000\075\000\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\083\000\
\000\000\084\000\085\000\086\000\087\000\088\000\089\000\090\000\
\091\000\092\000\075\000\076\000\077\000\078\000\079\000\080\000\
\081\000\082\000\083\000\000\000\084\000\085\000\086\000\087\000\
\088\000\089\000\090\000\091\000\092\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\000\000\000\000\000\000\000\000\
\000\000\150\000\000\000\000\000\000\000\000\000\000\000\000\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\000\000\
\000\000\000\000\000\000\000\000\155\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\000\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\075\000\076\000\077\000\078\000\079\000\080\000\081\000\
\082\000\083\000\000\000\084\000\085\000\086\000\087\000\088\000\
\089\000\090\000\091\000\092\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\000\000\000\000\157\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\067\000\
\068\000\069\000\070\000\071\000\072\000\073\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\083\000\000\000\084\000\
\085\000\086\000\087\000\088\000\089\000\090\000\091\000\092\000\
\075\000\076\000\077\000\078\000\079\000\080\000\081\000\082\000\
\083\000\000\000\084\000\085\000\086\000\087\000\088\000\089\000\
\090\000\091\000\092\000\067\000\068\000\069\000\070\000\071\000\
\072\000\073\000\000\000\000\000\064\000\064\000\064\000\064\000\
\064\000\064\000\064\000\000\000\000\000\064\000\064\000\000\000\
\064\000\000\000\000\000\064\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\051\000\051\000\000\000\
\051\000\000\000\000\000\051\000\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\064\000\064\000\064\000\
\086\000\087\000\088\000\089\000\090\000\091\000\092\000\064\000\
\064\000\064\000\064\000\064\000\064\000\064\000\064\000\064\000\
\063\000\063\000\063\000\063\000\063\000\063\000\063\000\051\000\
\051\000\063\000\063\000\000\000\063\000\000\000\000\000\063\000\
\000\000\000\000\000\000\066\000\066\000\066\000\066\000\066\000\
\066\000\066\000\000\000\000\000\066\000\066\000\000\000\066\000\
\000\000\000\000\066\000\000\000\000\000\000\000\000\000\000\000\
\000\000\063\000\063\000\063\000\052\000\052\000\000\000\052\000\
\000\000\000\000\052\000\063\000\063\000\063\000\063\000\063\000\
\063\000\063\000\063\000\063\000\066\000\066\000\066\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\066\000\066\000\
\066\000\066\000\066\000\066\000\066\000\066\000\066\000\065\000\
\065\000\065\000\065\000\065\000\065\000\065\000\052\000\052\000\
\065\000\065\000\000\000\065\000\000\000\000\000\065\000\000\000\
\000\000\000\000\046\000\046\000\046\000\046\000\046\000\046\000\
\046\000\000\000\000\000\046\000\046\000\000\000\046\000\000\000\
\000\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\065\000\065\000\065\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\065\000\065\000\065\000\065\000\065\000\
\065\000\065\000\065\000\046\000\046\000\046\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\046\000\046\000\062\000\062\000\
\062\000\062\000\062\000\062\000\062\000\000\000\000\000\062\000\
\062\000\000\000\062\000\000\000\000\000\062\000\000\000\000\000\
\000\000\067\000\067\000\067\000\067\000\067\000\067\000\067\000\
\000\000\000\000\067\000\067\000\000\000\067\000\000\000\000\000\
\067\000\000\000\000\000\000\000\000\000\000\000\000\000\062\000\
\062\000\062\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\062\000\062\000\062\000\062\000\062\000\062\000\062\000\
\062\000\062\000\067\000\067\000\067\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\067\000\067\000\067\000\067\000\
\067\000\067\000\067\000\067\000\067\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\000\000\000\000\044\000\044\000\
\000\000\044\000\000\000\000\000\044\000\000\000\000\000\000\000\
\043\000\043\000\043\000\043\000\043\000\043\000\043\000\000\000\
\000\000\043\000\043\000\000\000\043\000\000\000\000\000\043\000\
\000\000\000\000\000\000\000\000\000\000\000\000\044\000\044\000\
\044\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\044\000\044\000\044\000\044\000\044\000\044\000\044\000\044\000\
\044\000\043\000\043\000\043\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\043\000\043\000\045\000\045\000\045\000\045\000\
\045\000\045\000\045\000\000\000\000\000\045\000\045\000\000\000\
\045\000\000\000\000\000\045\000\000\000\000\000\000\000\049\000\
\049\000\049\000\049\000\049\000\049\000\049\000\000\000\000\000\
\049\000\049\000\000\000\049\000\000\000\000\000\049\000\000\000\
\000\000\000\000\000\000\000\000\000\000\045\000\045\000\045\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\045\000\045\000\
\049\000\049\000\049\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
\049\000\049\000\049\000\050\000\050\000\050\000\050\000\050\000\
\050\000\050\000\000\000\000\000\050\000\050\000\000\000\050\000\
\000\000\000\000\050\000\000\000\000\000\000\000\047\000\047\000\
\047\000\047\000\047\000\047\000\047\000\000\000\000\000\047\000\
\047\000\000\000\047\000\000\000\000\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\050\000\050\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\050\000\
\050\000\050\000\050\000\050\000\050\000\050\000\050\000\047\000\
\047\000\047\000\055\000\055\000\000\000\055\000\000\000\000\000\
\055\000\047\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\048\000\048\000\048\000\048\000\048\000\048\000\
\048\000\000\000\000\000\048\000\048\000\000\000\048\000\000\000\
\000\000\048\000\000\000\000\000\000\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\055\000\055\000\055\000\055\000\
\055\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\048\000\048\000\048\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\048\000\048\000\048\000\
\048\000\048\000\048\000\048\000\048\000\048\000\075\000\076\000\
\077\000\078\000\079\000\080\000\081\000\082\000\083\000\000\000\
\000\000\000\000\000\000\000\000\000\000\089\000\090\000\091\000\
\092\000\029\000\029\000\000\000\000\000\029\000\000\000\029\000\
\029\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\029\000\029\000\009\000\009\000\
\000\000\029\000\009\000\000\000\009\000\009\000\000\000\029\000\
\029\000\029\000\029\000\000\000\000\000\000\000\000\000\037\000\
\038\000\009\000\009\000\039\000\000\000\040\000\009\000\000\000\
\000\000\000\000\000\000\000\000\009\000\009\000\009\000\009\000\
\000\000\000\000\041\000\042\000\000\000\000\000\000\000\043\000\
\000\000\000\000\000\000\000\000\000\000\044\000\045\000\046\000\
\047\000"

let yycheck = "\038\000\
\137\000\138\000\013\000\040\000\043\000\001\000\096\000\096\000\
\011\001\038\001\013\001\038\001\049\000\024\000\009\001\054\000\
\153\000\056\000\016\001\030\000\157\000\060\000\061\000\009\001\
\063\000\064\000\015\000\016\000\067\000\068\000\069\000\070\000\
\071\000\072\000\073\000\010\001\075\000\076\000\077\000\078\000\
\079\000\080\000\081\000\082\000\083\000\084\000\085\000\086\000\
\087\000\088\000\089\000\090\000\091\000\092\000\144\000\144\000\
\051\001\096\000\009\001\033\000\034\000\012\001\038\001\010\001\
\011\001\011\001\013\001\009\001\012\001\016\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\014\001\011\001\010\001\
\011\001\009\001\013\001\009\001\029\001\016\001\015\001\038\001\
\039\001\040\001\041\001\013\001\131\000\132\000\133\000\010\001\
\011\001\015\001\013\001\010\001\139\000\016\001\011\001\000\000\
\143\000\052\001\053\001\054\001\055\001\056\001\149\000\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\010\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\052\001\053\001\054\001\055\001\056\001\010\001\015\001\
\010\001\016\001\010\001\030\000\013\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\034\000\139\000\010\001\255\255\
\255\255\017\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\026\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\036\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\009\001\255\255\255\255\012\001\010\001\011\001\255\255\013\001\
\016\001\255\255\016\001\255\255\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\255\255\016\001\255\255\038\001\039\001\040\001\
\041\001\255\255\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\255\255\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\255\255\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\255\255\011\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\255\255\255\255\010\001\017\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\026\001\255\255\
\255\255\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\255\255\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\255\255\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\010\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\255\255\255\255\255\255\011\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\255\255\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\255\255\
\011\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\042\001\
\043\001\044\001\045\001\046\001\047\001\048\001\049\001\050\001\
\255\255\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\255\255\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\255\255\255\255\255\255\255\255\
\255\255\013\001\255\255\255\255\255\255\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\255\255\255\255\255\255\013\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\255\255\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\255\255\255\255\010\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\043\001\044\001\
\045\001\046\001\047\001\048\001\049\001\050\001\255\255\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\042\001\043\001\044\001\045\001\046\001\047\001\048\001\049\001\
\050\001\255\255\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\255\255\255\255\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\255\255\255\255\010\001\011\001\255\255\
\013\001\255\255\255\255\016\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\010\001\011\001\255\255\
\013\001\255\255\255\255\016\001\042\001\043\001\044\001\045\001\
\046\001\047\001\048\001\049\001\050\001\042\001\043\001\044\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\052\001\
\053\001\010\001\011\001\255\255\013\001\255\255\255\255\016\001\
\255\255\255\255\255\255\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\255\255\255\255\010\001\011\001\255\255\013\001\
\255\255\255\255\016\001\255\255\255\255\255\255\255\255\255\255\
\255\255\042\001\043\001\044\001\010\001\011\001\255\255\013\001\
\255\255\255\255\016\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\042\001\043\001\044\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\052\001\053\001\
\010\001\011\001\255\255\013\001\255\255\255\255\016\001\255\255\
\255\255\255\255\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\255\255\255\255\010\001\011\001\255\255\013\001\255\255\
\255\255\016\001\255\255\255\255\255\255\255\255\255\255\255\255\
\042\001\043\001\044\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\042\001\043\001\044\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\010\001\
\011\001\255\255\013\001\255\255\255\255\016\001\255\255\255\255\
\255\255\001\001\002\001\003\001\004\001\005\001\006\001\007\001\
\255\255\255\255\010\001\011\001\255\255\013\001\255\255\255\255\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\042\001\
\043\001\044\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\042\001\043\001\044\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\255\255\255\255\010\001\011\001\
\255\255\013\001\255\255\255\255\016\001\255\255\255\255\255\255\
\001\001\002\001\003\001\004\001\005\001\006\001\007\001\255\255\
\255\255\010\001\011\001\255\255\013\001\255\255\255\255\016\001\
\255\255\255\255\255\255\255\255\255\255\255\255\042\001\043\001\
\044\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\052\001\053\001\054\001\055\001\056\001\057\001\058\001\059\001\
\060\001\042\001\043\001\044\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\001\001\002\001\003\001\004\001\
\005\001\006\001\007\001\255\255\255\255\010\001\011\001\255\255\
\013\001\255\255\255\255\016\001\255\255\255\255\255\255\001\001\
\002\001\003\001\004\001\005\001\006\001\007\001\255\255\255\255\
\010\001\011\001\255\255\013\001\255\255\255\255\016\001\255\255\
\255\255\255\255\255\255\255\255\255\255\042\001\043\001\044\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\052\001\
\053\001\054\001\055\001\056\001\057\001\058\001\059\001\060\001\
\042\001\043\001\044\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\052\001\053\001\054\001\055\001\056\001\057\001\
\058\001\059\001\060\001\001\001\002\001\003\001\004\001\005\001\
\006\001\007\001\255\255\255\255\010\001\011\001\255\255\013\001\
\255\255\255\255\016\001\255\255\255\255\255\255\001\001\002\001\
\003\001\004\001\005\001\006\001\007\001\255\255\255\255\010\001\
\011\001\255\255\013\001\255\255\255\255\016\001\255\255\255\255\
\255\255\255\255\255\255\255\255\042\001\043\001\044\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\052\001\053\001\
\054\001\055\001\056\001\057\001\058\001\059\001\060\001\042\001\
\043\001\044\001\010\001\011\001\255\255\013\001\255\255\255\255\
\016\001\052\001\053\001\054\001\055\001\056\001\057\001\058\001\
\059\001\060\001\001\001\002\001\003\001\004\001\005\001\006\001\
\007\001\255\255\255\255\010\001\011\001\255\255\013\001\255\255\
\255\255\016\001\255\255\255\255\255\255\001\001\002\001\003\001\
\004\001\005\001\006\001\007\001\052\001\053\001\054\001\055\001\
\056\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\042\001\043\001\044\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\042\001\043\001\
\044\001\045\001\046\001\047\001\048\001\049\001\050\001\255\255\
\255\255\255\255\255\255\255\255\255\255\057\001\058\001\059\001\
\060\001\008\001\009\001\255\255\255\255\012\001\255\255\014\001\
\015\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\027\001\028\001\008\001\009\001\
\255\255\032\001\012\001\255\255\014\001\015\001\255\255\038\001\
\039\001\040\001\041\001\255\255\255\255\255\255\255\255\008\001\
\009\001\027\001\028\001\012\001\255\255\014\001\032\001\255\255\
\255\255\255\255\255\255\255\255\038\001\039\001\040\001\041\001\
\255\255\255\255\027\001\028\001\255\255\255\255\255\255\032\001\
\255\255\255\255\255\255\255\255\255\255\038\001\039\001\040\001\
\041\001"

let yynames_const = "\
  TL\000\
  TS\000\
  TTL\000\
  TTS\000\
  TE\000\
  T\000\
  QE\000\
  EOF\000\
  FOR\000\
  LPAREN\000\
  RPAREN\000\
  COMMA\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  SEMI\000\
  INT_KEY\000\
  FLOAT_KEY\000\
  ARRAY_KEY\000\
  STRING_KEY\000\
  VOID_KEY\000\
  BOOLEAN_KEY\000\
  POINT_KEY\000\
  LINE_KEY\000\
  POLYGON_KEY\000\
  ELLIPSE_KEY\000\
  WHILE\000\
  IF\000\
  ELSE\000\
  ELSEIF\000\
  CASE\000\
  RETURN\000\
  SWITCH\000\
  BREAK\000\
  CONTINUE\000\
  DEF\000\
  DEFAULT\000\
  PARA\000\
  INTERS\000\
  RELAT\000\
  EE\000\
  NE\000\
  SE\000\
  LE\000\
  S\000\
  L\000\
  E\000\
  PLUS\000\
  MINUS\000\
  MUL\000\
  DIV\000\
  PERC\000\
  SSE\000\
  LLE\000\
  SS\000\
  LL\000\
  "

let yynames_block = "\
  ID\000\
  NUM\000\
  INT\000\
  String\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    Obj.repr(
# 37 "ALG_Parser.mly"
              ( [], [] )
# 661 "ALG_Parser.ml"
               : AST.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : AST.program) in
    Obj.repr(
# 38 "ALG_Parser.mly"
                   ( (_1 :: fst _2), snd _2 )
# 669 "ALG_Parser.ml"
               : AST.program))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'fdecl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : AST.program) in
    Obj.repr(
# 39 "ALG_Parser.mly"
                ( fst _2, (_1 :: snd _2) )
# 677 "ALG_Parser.ml"
               : AST.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 43 "ALG_Parser.mly"
 ( [] )
# 683 "ALG_Parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'stmt) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'stmt_list) in
    Obj.repr(
# 44 "ALG_Parser.mly"
                 ( _1 :: _2 )
# 691 "ALG_Parser.ml"
               : 'stmt_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 47 "ALG_Parser.mly"
            (ExStmt(_1))
# 698 "ALG_Parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 48 "ALG_Parser.mly"
                   ( Return(_2) )
# 705 "ALG_Parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 49 "ALG_Parser.mly"
                          ( Block(_2) )
# 712 "ALG_Parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 50 "ALG_Parser.mly"
                                          ( If(_3, _5, Block([])) )
# 720 "ALG_Parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'stmt) in
    let _7 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 51 "ALG_Parser.mly"
                                      ( If(_3, _5, _7) )
# 729 "ALG_Parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 52 "ALG_Parser.mly"
                                                 ( For(_3, _5, _7, _9) )
# 739 "ALG_Parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'stmt) in
    Obj.repr(
# 53 "ALG_Parser.mly"
                               ( While(_3, _5))
# 747 "ALG_Parser.ml"
               : 'stmt))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "ALG_Parser.mly"
           (INT_TYPE)
# 753 "ALG_Parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 57 "ALG_Parser.mly"
            (FLOAT)
# 759 "ALG_Parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 58 "ALG_Parser.mly"
            (ARRAY)
# 765 "ALG_Parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "ALG_Parser.mly"
            (STRING)
# 771 "ALG_Parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "ALG_Parser.mly"
           (VOID)
# 777 "ALG_Parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 61 "ALG_Parser.mly"
             (BOOLEAN)
# 783 "ALG_Parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 62 "ALG_Parser.mly"
            (POINT)
# 789 "ALG_Parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 63 "ALG_Parser.mly"
          (LINE)
# 795 "ALG_Parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 64 "ALG_Parser.mly"
             (POLYGON)
# 801 "ALG_Parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 65 "ALG_Parser.mly"
             (ELLIPSE)
# 807 "ALG_Parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 69 "ALG_Parser.mly"
             (_1,_2)
# 815 "ALG_Parser.ml"
               : 'formal_decl))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 72 "ALG_Parser.mly"
                  (_1,_2)
# 823 "ALG_Parser.ml"
               : 'var_decl))
; (fun __caml_parser_env ->
    Obj.repr(
# 75 "ALG_Parser.mly"
 ([])
# 829 "ALG_Parser.ml"
               : 'formal_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 76 "ALG_Parser.mly"
              (_1)
# 836 "ALG_Parser.ml"
               : 'formal_list_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'formal_decl) in
    Obj.repr(
# 79 "ALG_Parser.mly"
              ( [_1] )
# 843 "ALG_Parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'formal_decl) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'formal_list) in
    Obj.repr(
# 80 "ALG_Parser.mly"
                               ( _1 :: _3 )
# 851 "ALG_Parser.ml"
               : 'formal_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 83 "ALG_Parser.mly"
  ([])
# 857 "ALG_Parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'var_decl) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'vdecl_list) in
    Obj.repr(
# 84 "ALG_Parser.mly"
                      ( _1 :: _2 )
# 865 "ALG_Parser.ml"
               : 'vdecl_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : 'var_type) in
    let _3 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : 'formal_list_opt) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'vdecl_list) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'stmt_list) in
    Obj.repr(
# 88 "ALG_Parser.mly"
                                                                                  ({ftype=_2;fname=_3;formal_list=_5;locals=_8;body=_9})
# 876 "ALG_Parser.ml"
               : 'fdecl))
; (fun __caml_parser_env ->
    Obj.repr(
# 102 "ALG_Parser.mly"
 ( [] )
# 882 "ALG_Parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 103 "ALG_Parser.mly"
               ( _1 )
# 889 "ALG_Parser.ml"
               : 'actuals_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 105 "ALG_Parser.mly"
      ( [_1] )
# 896 "ALG_Parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'actuals_list) in
    Obj.repr(
# 106 "ALG_Parser.mly"
                         ( _1 :: _3 )
# 904 "ALG_Parser.ml"
               : 'actuals_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 145 "ALG_Parser.mly"
     (NUM(_1))
# 911 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 146 "ALG_Parser.mly"
     (INT(_1))
# 918 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 147 "ALG_Parser.mly"
    (ID(_1))
# 925 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 148 "ALG_Parser.mly"
         (String(_1))
# 932 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'polygon) in
    Obj.repr(
# 150 "ALG_Parser.mly"
         (PolygonEx(_1))
# 939 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'ellipse) in
    Obj.repr(
# 151 "ALG_Parser.mly"
         (EllipseEx(_1))
# 946 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'line) in
    Obj.repr(
# 152 "ALG_Parser.mly"
         (LineEx(_1))
# 953 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 153 "ALG_Parser.mly"
                  (Binop(_1,INTERS,_3))
# 961 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 154 "ALG_Parser.mly"
                (Binop(_1,PARA,_3))
# 969 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 155 "ALG_Parser.mly"
                 (Binop(_1,RELAT,_3))
# 977 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 156 "ALG_Parser.mly"
              (Binop(_1,TE,_3))
# 985 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 157 "ALG_Parser.mly"
              (Binop(_1,SS,_3))
# 993 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 158 "ALG_Parser.mly"
              (Binop(_1,LL,_3))
# 1001 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 159 "ALG_Parser.mly"
               (Binop(_1,SSE,_3))
# 1009 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 160 "ALG_Parser.mly"
               (Binop(_1,LLE,_3))
# 1017 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 161 "ALG_Parser.mly"
                 (Binop(_1,PLUS, _3))
# 1025 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 162 "ALG_Parser.mly"
                 (Binop(_1,MINUS, _3))
# 1033 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 163 "ALG_Parser.mly"
                 (Binop(_1,MUL, _3))
# 1041 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 164 "ALG_Parser.mly"
                 (Binop(_1,DIV, _3))
# 1049 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 165 "ALG_Parser.mly"
                 (Binop(_1,PERC, _3))
# 1057 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 166 "ALG_Parser.mly"
               (Binop(_1,EE, _3))
# 1065 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 167 "ALG_Parser.mly"
               (Binop(_1,NE, _3))
# 1073 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 168 "ALG_Parser.mly"
               (Binop(_1,LE, _3))
# 1081 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 169 "ALG_Parser.mly"
               (Binop(_1,SE, _3))
# 1089 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 170 "ALG_Parser.mly"
              (Binop(_1,L, _3))
# 1097 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 171 "ALG_Parser.mly"
              (Binop(_1,S, _3))
# 1105 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 172 "ALG_Parser.mly"
             (Binop(_1,T,_3))
# 1113 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 173 "ALG_Parser.mly"
              (Binop(_1,TS,_3))
# 1121 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 174 "ALG_Parser.mly"
              (Binop(_1,TL,_3))
# 1129 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 175 "ALG_Parser.mly"
               (Binop(_1,TTS,_3))
# 1137 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 176 "ALG_Parser.mly"
               (Binop(_1,TTL,_3))
# 1145 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 177 "ALG_Parser.mly"
              (Binop(_1,QE,_3))
# 1153 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 178 "ALG_Parser.mly"
           (Assign(_1,_3))
# 1161 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 179 "ALG_Parser.mly"
                    (_2)
# 1168 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'actuals_opt) in
    Obj.repr(
# 180 "ALG_Parser.mly"
                               (Call(_1,_3))
# 1176 "ALG_Parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 5 : 'point) in
    let _4 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 183 "ALG_Parser.mly"
                                                 (Ellipse(_2,_4,_6))
# 1185 "ALG_Parser.ml"
               : 'ellipse))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'points) in
    Obj.repr(
# 186 "ALG_Parser.mly"
                             (Polygon(_2))
# 1192 "ALG_Parser.ml"
               : 'polygon))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'point) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'point) in
    Obj.repr(
# 189 "ALG_Parser.mly"
                                       (Line(_2,_4))
# 1200 "ALG_Parser.ml"
               : 'line))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'point) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'point) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'point) in
    Obj.repr(
# 192 "ALG_Parser.mly"
                               ([_1;_3;_5])
# 1209 "ALG_Parser.ml"
               : 'points))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'point) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'points) in
    Obj.repr(
# 193 "ALG_Parser.mly"
                               (_1::_3)
# 1217 "ALG_Parser.ml"
               : 'points))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 195 "ALG_Parser.mly"
                                   (Point(_2,_4))
# 1225 "ALG_Parser.ml"
               : 'point))
(* Entry program *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let program (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : AST.program)
;;
